The Reflection inclute the following modules :
    1.Project and Class Infomation;
    2.Design thought;
    3.Gain from the System;
    4.Problem and Furture work

===Project and Class Infomation===
The System include the following class:

1. QuestProducer:
    A class to produce quests Constantly to questQueue

2. Params:
    A class to define different behavior'stime  of Knight and KingArthur.

3. Knight:
    A class to represent Knight with property:
        questionId: define the quest which are acquired to knight;
        nameId: to define a unique knight;
        behavor: define the behavior of Knight, I use Enum to represent six behaviors.
            Acquire quest, leaving greate hall, enter greate hall complete quest, sitting down, report ques
        I use a loop to execute command and change behavior

4. KingArthur:
    A class to represent KingArthur;
        there is only one KingArthur; there also have some behavior defined as enter greate hall; start meeting
        end meeting and leave greate hall;
        there is a loop to execute command and change behavior

5. Agenda:
     The class to specific execure commands and synchronize share variable. all other class
     will interact with agenda.

6. Main: the entrance of System.

The running process is:
1.fork the QuestProducer to produce quest
2.fork all knight and KingArthur
3.init the system; knight 1 are acquired with quest 1, record the state of knight;
4.start run.


===Design thought===
I use class Agenda to synchronize share variable:
1.newQuestQueue is shared with All Knights and QuestProducer.
2.the state that king is in hall is synchronized with KingArthur and All Knights
    because if king is in greate hall; all knight can't enter or leave the greate hall.
3. the state if the meeting is started or ended is synchronized with KingArthur and All Knights.
    Because the condition of start the meeting is there is no knight in greate hall with new quest
    and all knights have sitted down.

    The condition of end the meeting is that all knights have standed up.
4.completeQuestQueue is synchronized between the knights.

5.knightState is synchronized with KingArthur and All Knights. King need to check if can execute next
  behavior.

newQuestQueue shared between all Knights and QuestProducer is represented with producer/consumer model

for other shared variable, all Knights and QuestProducer will compete the variable. They may be blocked by invoking
wait() and continue to execute when the condition is satisfied.


For KingArthur and All Knights, there different behaviors are represented with state machine.

===Gain from the System===
1. have a deep understand about state machine、 producer/consumer model、 different state of thread、
    how to synchronize shared variable、how to solve dead lock problem.
2. It is different to debug multi-thread program. So I learn more methods to debug multi-thread program.
3. there are more shared variables with different thread. my skill to find and define bug is improved.

===Problem===
1. with different params, the system are possible encounter dead lock rarely.
2. There is more optimize Ponits about the mechanism to debug the system.
3. The system don't have a condition or method to be terminated
4. There is not more attention on different exceptions.